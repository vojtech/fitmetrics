/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class SleepApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * POST /1.2/user/-/sleep.json
     * Log Sleep
     * Creates a log entry for a sleep event and returns a response in the format requested.
     * @param startTime Start time includes hours and minutes in the format HH:mm.
     * @param duration Duration in milliseconds.
     * @param date Log entry in the format yyyy-MM-dd.
     * @return void
     */
    open suspend fun addSleep(
        startTime: kotlin.String,
        duration: kotlin.Int,
        date: java.time.LocalDate
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        startTime?.apply { localVariableQuery["startTime"] = listOf("$startTime") }
        duration?.apply { localVariableQuery["duration"] = listOf("$duration") }
        date?.apply { localVariableQuery["date"] = listOf("$date") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1.2/user/-/sleep.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1.2/user/-/sleep/{log-id}.json
     * Delete Sleep Log
     * Deletes a user&#39;s sleep log entry with the given ID.
     * @param logId The ID of the sleep log to be deleted.
     * @return void
     */
    open suspend fun deleteSleep(logId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1.2/user/-/sleep/{log-id}.json".replace("{" + "log-id" + "}", "$logId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1.2/user/-/sleep/date/{date}.json
     * Get Sleep Log
     * The Get Sleep Logs by Date endpoint returns a summary and list of a user&#39;s sleep log entries (including naps) as well as detailed sleep entry data for a given day.
     * @param date The date of records to be returned. In the format yyyy-MM-dd.
     * @return void
     */
    open suspend fun getSleepByDate(date: java.time.LocalDate): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1.2/user/-/sleep/date/{date}.json".replace("{" + "date" + "}", "$date"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1.2/user/-/sleep/date/{base-date}/{end-date}.json
     * Get Sleep Logs by Date Range
     * The Get Sleep Logs by Date Range endpoint returns a list of a user&#39;s sleep log entries (including naps) as well as detailed sleep entry data for a given date range (inclusive of start and end dates).
     * @param baseDate The date of records to be returned. In the format yyyy-MM-dd.
     * @param endDate The date of records to be returned. In the format yyyy-MM-dd.
     * @return void
     */
    open suspend fun getSleepByDateRange(
        baseDate: java.time.LocalDate,
        endDate: java.time.LocalDate
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1.2/user/-/sleep/date/{base-date}/{end-date}.json".replace(
                    "{" + "base-date" + "}",
                    "$baseDate"
                ).replace("{" + "end-date" + "}", "$endDate"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1.2/user/-/sleep/goal.json
     * Get Sleep Goal
     * Returns the user&#39;s sleep goal.
     * @return void
     */
    open suspend fun getSleepGoal(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1.2/user/-/sleep/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1.2/user/-/sleep/list.json
     * Get Sleep Logs List
     * The Get Sleep Logs List endpoint returns a list of a user&#39;s sleep logs (including naps) before or after a given day with offset, limit, and sort order.
     * @param sort The sort order of entries by date asc (ascending) or desc (descending).
     * @param offset The offset number of entries.
     * @param limit The maximum number of entries returned (maximum;100).
     * @param beforeDate The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate should be specified. (optional)
     * @param afterDate The date in the format yyyy-MM-ddTHH:mm:ss. (optional)
     * @return void
     */
    open suspend fun getSleepList(
        sort: kotlin.String,
        offset: kotlin.Int,
        limit: kotlin.Int,
        beforeDate: java.time.LocalDate?,
        afterDate: java.time.LocalDate?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        beforeDate?.apply { localVariableQuery["beforeDate"] = listOf("$beforeDate") }
        afterDate?.apply { localVariableQuery["afterDate"] = listOf("$afterDate") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1.2/user/-/sleep/list.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1.2/user/-/sleep/goal.json
     * Update Sleep Goal
     * Create or update the user&#39;s sleep goal and get a response in the JSON format.
     * @param minDuration Duration of sleep goal.
     * @return void
     */
    open suspend fun updateSleepGoal(minDuration: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        minDuration?.apply { localVariableQuery["minDuration"] = listOf("$minDuration") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1.2/user/-/sleep/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
