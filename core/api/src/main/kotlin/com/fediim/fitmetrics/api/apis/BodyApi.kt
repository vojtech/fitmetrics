/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class BodyApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * POST /1/user/-/body/log/fat.json
     * Log Body Fat
     * Creates a log entry for body fat and returns a response in the format requested.
     * @param fat Body fat in the format of X.XX in the unit system that corresponds to the Accept-Language header provided.
     * @param date Log entry date in the format yyyy-MM-dd.
     * @param time Time of the measurement in hours and minutes in the format HH:mm:ss that is set to the last second of the day if not provided.
     * @return void
     */
    open suspend fun addBodyFatLog(
        fat: kotlin.Int,
        date: java.time.LocalDate,
        time: kotlin.String
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        fat?.apply { localVariableQuery["fat"] = listOf("$fat") }
        date?.apply { localVariableQuery["date"] = listOf("$date") }
        time?.apply { localVariableQuery["time"] = listOf("$time") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/body/log/fat.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/body/log/weight.json
     * Log Weight
     * Creates log entry for a body weight using units in the unit systems that corresponds to the Accept-Language header provided and gets a response in the format requested.
     * @param weight Weight in the format of X.XX.
     * @param date Log entry date in the format yyyy-MM-dd.
     * @param time Time of the measurement; hours and minutes in the format of HH:mm:ss, which is set to the last second of the day if not provided. (optional)
     * @return void
     */
    open suspend fun addWeightLog(
        weight: kotlin.Int,
        date: java.time.LocalDate,
        time: kotlin.String?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        weight?.apply { localVariableQuery["weight"] = listOf("$weight") }
        date?.apply { localVariableQuery["date"] = listOf("$date") }
        time?.apply { localVariableQuery["time"] = listOf("$time") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/body/log/weight.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/body/log/fat/{body-fat-log-id}.json
     * Delete Body Fat Log
     * Deletes a user&#39;s body fat log entry with the given ID.
     * @param bodyFatLogId The ID of the body fat log entry.
     * @return void
     */
    open suspend fun deleteBodyFatLog(bodyFatLogId: kotlin.Int): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/body/log/fat/{body-fat-log-id}.json".replace(
                    "{" + "body-fat-log-id" + "}",
                    "$bodyFatLogId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/body/log/weight/{body-weight-log-id}.json
     * Delete Weight Log
     * Deletes a user&#39;s body weight log entrywith the given ID.
     * @param bodyWeightLogId The ID of the body weight log entry.
     * @return void
     */
    open suspend fun deleteWeightLog(bodyWeightLogId: kotlin.Int): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/body/log/weight/{body-weight-log-id}.json".replace(
                    "{" + "body-weight-log-id" + "}",
                    "$bodyWeightLogId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/body/log/fat/date/{date}.json
     * Get Body Fat Logs
     * Retreives a list of all user&#39;s body fat log entries for a given day in the format requested.
     * @param date The date in the format yyyy-MM-dd.
     * @return void
     */
    open suspend fun getBodyFatByDate(date: java.time.LocalDate): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/body/log/fat/date/{date}.json".replace("{" + "date" + "}", "$date"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/body/log/fat/date/{date}/{period}.json
     * Get Body Fat Logs
     * Retreives a list of all user&#39;s body fat log entries for a given day in the format requested.
     * @param date The date in the format yyyy-MM-dd.
     * @param period The range for which data will be returned. Options are 1d, 7d, 30d, 1w, 1m, 3m, 6m, 1y, or max.
     * @return void
     */
    open suspend fun getBodyFatByDatePeriod(
        date: java.time.LocalDate,
        period: kotlin.String
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/body/log/fat/date/{date}/{period}.json".replace(
                    "{" + "date" + "}",
                    "$date"
                ).replace("{" + "period" + "}", "$period"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/body/log/fat/date/{base-date}/{end-date}.json
     * Get Body Fat Logs
     * Retreives a list of all user&#39;s body fat log entries for a given day in the format requested.
     * @param baseDate The range start date in the format yyyy-MM-dd or today.
     * @param endDate The end date of the range.
     * @return void
     */
    open suspend fun getBodyFatByDateRange(
        baseDate: java.time.LocalDate,
        endDate: java.time.LocalDate
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/body/log/fat/date/{base-date}/{end-date}.json".replace(
                    "{" + "base-date" + "}",
                    "$baseDate"
                ).replace("{" + "end-date" + "}", "$endDate"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/body/log/{goal-type}/goal.json
     * Get Body Goals
     * Retreives a user&#39;s current body fat percentage or weight goal using units in the unit systems that corresponds to the Accept-Language header providedin the format requested.
     * @param goalType weight or fat.
     * @return void
     */
    open suspend fun getBodyGoals(goalType: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/body/log/{goal-type}/goal.json".replace(
                    "{" + "goal-type" + "}",
                    "$goalType"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/body/log/weight/date/{date}.json
     * Get Weight Logs
     * Retreives a list of all user&#39;s body weight log entries for a given day using units in the unit systems which corresponds to the Accept-Language header provided.
     * @param date The date in the format yyyy-MM-dd.
     * @return void
     */
    open suspend fun getWeightByDate(date: java.time.LocalDate): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/body/log/weight/date/{date}.json".replace("{" + "date" + "}", "$date"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/body/log/weight/date/{date}/{period}.json
     * Get Body Fat Logs
     * Retreives a list of all user&#39;s body weight log entries for a given day in the format requested.
     * @param date The date in the format yyyy-MM-dd.
     * @param period The range for which data will be returned. Options are 1d, 7d, 30d, 1w, 1m, 3m, 6m, 1y, or max.
     * @return void
     */
    open suspend fun getWeightByDatePeriod(
        date: java.time.LocalDate,
        period: kotlin.String
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/body/log/weight/date/{date}/{period}.json".replace(
                    "{" + "date" + "}",
                    "$date"
                ).replace("{" + "period" + "}", "$period"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/body/log/weight/date/{base-date}/{end-date}.json
     * Get Body Fat Logs
     * Retreives a list of all user&#39;s body fat log entries for a given day in the format requested.
     * @param baseDate The range start date in the format yyyy-MM-dd or today.
     * @param endDate The end date of the range.
     * @return void
     */
    open suspend fun getWeightByDateRange(
        baseDate: java.time.LocalDate,
        endDate: java.time.LocalDate
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/body/log/weight/date/{base-date}/{end-date}.json".replace(
                    "{" + "base-date" + "}",
                    "$baseDate"
                ).replace("{" + "end-date" + "}", "$endDate"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/body/log/fat/goal.json
     * Update Body Fat Goal
     * Updates user&#39;s fat percentage goal.
     * @param fat Target body fat percentage; in the format X.XX.
     * @return void
     */
    open suspend fun updateBodyFatGoal(fat: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        fat?.apply { localVariableQuery["fat"] = listOf("$fat") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/body/log/fat/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/body/log/weight/goal.json
     * Update Weight Goal
     * Updates user&#39;s fat percentage goal.
     * @param startDate Weight goal start date; in the format yyyy-MM-dd.
     * @param startWeight Weight goal start weight; in the format X.XX, in the unit systems that corresponds to the Accept-Language header provided.
     * @param weight Weight goal target weight; in the format X.XX, in the unit systems that corresponds to the Accept-Language header provided; required if user doesn&#39;t have an existing weight goal. (optional)
     * @return void
     */
    open suspend fun updateWeightGoal(
        startDate: kotlin.String,
        startWeight: kotlin.String,
        weight: kotlin.String?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        startDate?.apply { localVariableQuery["startDate"] = listOf("$startDate") }
        startWeight?.apply { localVariableQuery["startWeight"] = listOf("$startWeight") }
        weight?.apply { localVariableQuery["weight"] = listOf("$weight") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/body/log/weight/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
