/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class SubscriptionsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * POST /1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json
     * Add a Subscription
     * Adds a subscription in your application so that users can get notifications and return a response in the format requested. The subscription-id value provides a way to associate an update with a particular user stream in your application.
     * @param collectionPath This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections&#39; updates. Each subscriber can have only one subscription for a specific user&#39;s collection.
     * @param subscriptionId This is the unique ID of the subscription created by the API client application. Each ID must be unique across the entire set of subscribers and collections. The Fitbit servers will pass this ID back along with any notifications about the user indicated by the user parameter in the URL path.
     * @return void
     */
    open suspend fun addSubscriptions(
        collectionPath: kotlin.String,
        subscriptionId: kotlin.String
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json".replace(
                    "{" + "collection-path" + "}",
                    "$collectionPath"
                ).replace("{" + "subscription-id" + "}", "$subscriptionId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json
     * Delete a Subscription
     * Deletes a subscription for a user..
     * @param collectionPath This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections&#39; updates. Each subscriber can have only one subscription for a specific user&#39;s collection.
     * @param subscriptionId This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections&#39; updates. Each subscriber can have only one subscription for a specific user&#39;s collection.
     * @return void
     */
    open suspend fun deleteSubscriptions(
        collectionPath: kotlin.String,
        subscriptionId: kotlin.String
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json".replace(
                    "{" + "collection-path" + "}",
                    "$collectionPath"
                ).replace("{" + "subscription-id" + "}", "$subscriptionId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/{collection-path}/apiSubscriptions.json
     * Get a List of Subscriptions
     * Retreives a list of a user&#39;s subscriptions for your application in the format requested. You can either fetch subscriptions for a specific collection or the entire list of subscriptions for the user. For best practice, make sure that your application maintains this list on your side and use this endpoint only to periodically ensure data consistency.
     * @param collectionPath This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections&#39; updates. Each subscriber can have only one subscription for a specific user&#39;s collection.
     * @return void
     */
    open suspend fun getSubscriptionsList(collectionPath: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/{collection-path}/apiSubscriptions.json".replace(
                    "{" + "collection-path" + "}",
                    "$collectionPath"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
