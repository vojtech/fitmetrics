/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class ActivityApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * POST /1/user/-/activities.json
     * Log Activity
     * The Log Activity endpoint creates log entry for an activity or user&#39;s private custom activity using units in the unit system which corresponds to the Accept-Language header provided (or using optional custom distanceUnit) and get a response in the format requested.
     * @param activityId The ID of the activity, directory activity or intensity level activity.
     * @param manualCalories Calories burned that are manaully specified. Required with activityName must be provided.
     * @param startTime Activity start time. Hours and minutes in the format HH:mm:ss.
     * @param durationMillis Duration in milliseconds.
     * @param date Log entry date in the format yyyy-MM-dd.
     * @param distance Distance is required for logging directory activity in the format X.XX and in the selected distanceUnit.
     * @param activityName Custom activity name. Either activityId or activityName must be provided. (optional)
     * @param distanceUnit Distance measurement unit. Steps units are available only for Walking (activityId&#x3D;90013) and Running (activityId&#x3D;90009) directory activities and their intensity levels. (optional)
     * @return void
     */
    open suspend fun addActivitiesLog(
        activityId: kotlin.Int,
        manualCalories: kotlin.Int,
        startTime: kotlin.String,
        durationMillis: kotlin.Int,
        date: java.time.LocalDate,
        distance: kotlin.Int,
        activityName: kotlin.String?,
        distanceUnit: kotlin.Int?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        activityId?.apply { localVariableQuery["activityId"] = listOf("$activityId") }
        activityName?.apply { localVariableQuery["activityName"] = listOf("$activityName") }
        manualCalories?.apply { localVariableQuery["manualCalories"] = listOf("$manualCalories") }
        startTime?.apply { localVariableQuery["startTime"] = listOf("$startTime") }
        durationMillis?.apply { localVariableQuery["durationMillis"] = listOf("$durationMillis") }
        date?.apply { localVariableQuery["date"] = listOf("$date") }
        distance?.apply { localVariableQuery["distance"] = listOf("$distance") }
        distanceUnit?.apply { localVariableQuery["distanceUnit"] = listOf("$distanceUnit") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/activities.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/activities/favorite/{activity-id}.json
     * Add Favorite Activity
     * Adds the activity with the given ID to user&#39;s list of favorite activities.
     * @param activityId The encoded ID of the activity.
     * @return void
     */
    open suspend fun addFavoriteActivities(activityId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/activities/favorite/{activity-id}.json".replace(
                    "{" + "activity-id" + "}",
                    "$activityId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/activities/goals/{period}.json
     * Update Activity Goals
     * Updates a user&#39;s daily or weekly activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
     * @param period daily or weekly.
     * @param type goal type
     * @param `value` goal value
     * @return void
     */
    open suspend fun addUpdateActivitiesGoals(
        period: kotlin.String,
        type: kotlin.String,
        `value`: kotlin.String
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        type?.apply { localVariableQuery["type"] = listOf("$type") }
        `value`?.apply { localVariableQuery["value"] = listOf("$`value`") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/activities/goals/{period}.json".replace("{" + "period" + "}", "$period"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/activities/{activity-log-id}.json
     * Delete Activity Log
     * Deletes a user&#39;s activity log entry with the given ID.
     * @param activityLogId The id of the activity log entry.
     * @return void
     */
    open suspend fun deleteActivitiesLog(activityLogId: kotlin.Int): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/activities/{activity-log-id}.json".replace(
                    "{" + "activity-log-id" + "}",
                    "$activityLogId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/activities/favorite/{activity-id}.json
     * Delete Favorite Activity
     * Removes the activity with the given ID from a user&#39;s list of favorite activities.
     * @param activityId The ID of the activity to be removed.
     * @return void
     */
    open suspend fun deleteFavoriteActivities(activityId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/activities/favorite/{activity-id}.json".replace(
                    "{" + "activity-id" + "}",
                    "$activityId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities/date/{date}.json
     * Get Activity Summary by Date
     * Retrieves a summary and list of a user&#39;s activities and activity log entries for a given day.
     * @param date The date in the format yyyy-MM-dd
     * @return void
     */
    open suspend fun getActivitiesByDate(date: java.time.LocalDate): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities/date/{date}.json".replace("{" + "date" + "}", "$date"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities/goals/{period}.json
     * Get Activity Goals
     * Retreives a user&#39;s current daily or weekly activity goals using measurement units as defined in the unit system, which corresponds to the Accept-Language header provided.
     * @param period daily or weekly.
     * @return void
     */
    open suspend fun getActivitiesGoals(period: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities/goals/{period}.json".replace("{" + "period" + "}", "$period"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities.json
     * Get Lifetime Stats
     * Updates a user&#39;s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
     * @return void
     */
    open suspend fun getActivitiesLog(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities/list.json
     * Get Activity Log List
     * Retreives a list of user&#39;s activity log entries before or after a given day with offset and limit using units in the unit system which corresponds to the Accept-Language header provided.
     * @param sort The sort order of entries by date asc (ascending) or desc (descending).
     * @param offset The offset number of entries.
     * @param limit The maximum number of entries returned (maximum;100).
     * @param beforeDate The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate should be specified. (optional)
     * @param afterDate The date in the format yyyy-MM-ddTHH:mm:ss. (optional)
     * @return void
     */
    open suspend fun getActivitiesLogList(
        sort: kotlin.String,
        offset: kotlin.Int,
        limit: kotlin.Int,
        beforeDate: java.time.LocalDate?,
        afterDate: java.time.LocalDate?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        beforeDate?.apply { localVariableQuery["beforeDate"] = listOf("$beforeDate") }
        afterDate?.apply { localVariableQuery["afterDate"] = listOf("$afterDate") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities/list.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities/{log-id}.tcx
     * Get Activity TCX
     * Retreives the details of a user&#39;s location and heart rate data during a logged exercise activity.
     * @param logId The activity&#39;s log ID.
     * @param includePartialTCX Include TCX points regardless of GPS data being present (optional)
     * @return void
     */
    open suspend fun getActivitiesTCX(
        logId: kotlin.String,
        includePartialTCX: kotlin.Boolean?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        includePartialTCX?.apply {
            localVariableQuery["includePartialTCX"] = listOf(
                "$includePartialTCX"
            )
        }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities/{log-id}.tcx".replace("{" + "log-id" + "}", "$logId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/activities/{activity-id}.json
     * Get Activity Type
     * Returns the detail of a specific activity in the Fitbit activities database in the format requested. If activity has levels, it also returns a list of activity level details.
     * @param activityId The activity ID.
     * @return void
     */
    open suspend fun getActivitiesTypeDetail(activityId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/activities/{activity-id}.json".replace(
                    "{" + "activity-id" + "}",
                    "$activityId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/activities.json
     * Browse Activity Types
     * Retreives a tree of all valid Fitbit public activities from the activities catelog as well as private custom activities the user created in the format requested.
     * @return void
     */
    open suspend fun getActivitiesTypes(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/activities.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities/favorite.json
     * Get Favorite Activities
     * Returns a list of a user&#39;s favorite activities.
     * @return void
     */
    open suspend fun getFavoriteActivities(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities/favorite.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities/frequent.json
     * Get Frequent Activities
     * Retreives a list of a user&#39;s frequent activities in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
     * @return void
     */
    open suspend fun getFrequentActivities(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities/frequent.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/activities/recent.json
     * Get Recent Activity Types
     * Retreives a list of a user&#39;s recent activities types logged with some details of the last activity log of that type using units in the unit system which corresponds to the Accept-Language header provided.
     * @return void
     */
    open suspend fun getRecentActivities(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/activities/recent.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
