/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class ElectrocardiogramApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * GET /1/user/-/ecg/list.json
     * Get ECG Log List
     * This endpoint is used for querying the user&#39;s on-device ECG readings.
     * @param sort The sort order of entries by date asc (ascending) or desc (descending).
     * @param offset The offset number of entries.
     * @param limit The maximum number of entries returned (maximum;10).
     * @param beforeDate The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate should be specified. (optional)
     * @param afterDate The date in the format yyyy-MM-ddTHH:mm:ss. (optional)
     * @return void
     */
    open suspend fun getEcgLogList(
        sort: kotlin.String,
        offset: kotlin.Int,
        limit: kotlin.Int,
        beforeDate: java.time.LocalDate?,
        afterDate: java.time.LocalDate?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        beforeDate?.apply { localVariableQuery["beforeDate"] = listOf("$beforeDate") }
        afterDate?.apply { localVariableQuery["afterDate"] = listOf("$afterDate") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/ecg/list.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
