/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import com.fediim.fitmetrics.api.models.Meal
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class NutritionApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * POST /1/user/-/foods/log/favorite/{food-id}.json
     * Add Favorite Food
     * Updates a user&#39;s daily activity goals and returns a response using units in the unit system which corresponds to the Accept-Language header provided.
     * @param foodId The ID of the food to be added to user&#39;s favorites.
     * @return void
     */
    open suspend fun addFavoriteFood(foodId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods/log/favorite/{food-id}.json".replace(
                    "{" + "food-id" + "}",
                    "$foodId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/foods.json
     * Create Food
     * Creates a new private food for a user and returns a response in the format requested. The created food is found via the Search Foods call.
     * @param name The food name.
     * @param defaultFoodMeasurementUnitId The ID of the default measurement unit. Full list of units can be retrieved via the Get Food Units endpoint.
     * @param defaultServingSize The size of the default serving. Nutrition values should be provided for this serving size.
     * @param calories The calories in the default serving size.
     * @param formType Form type; LIQUID or DRY. (optional)
     * @param description The description of the food. (optional)
     * @return void
     */
    open suspend fun addFoods(
        name: kotlin.String,
        defaultFoodMeasurementUnitId: kotlin.String,
        defaultServingSize: kotlin.String,
        calories: kotlin.String,
        formType: kotlin.String?,
        description: kotlin.String?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        name?.apply { localVariableQuery["name"] = listOf("$name") }
        defaultFoodMeasurementUnitId?.apply {
            localVariableQuery["defaultFoodMeasurementUnitId"] =
                listOf(
                    "$defaultFoodMeasurementUnitId"
                )
        }
        defaultServingSize?.apply {
            localVariableQuery["defaultServingSize"] = listOf("$defaultServingSize")
        }
        calories?.apply { localVariableQuery["calories"] = listOf("$calories") }
        formType?.apply { localVariableQuery["formType"] = listOf("$formType") }
        description?.apply { localVariableQuery["description"] = listOf("$description") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/foods/log.json
     * Log Food
     * Creates food log entries for users with or without foodId value.
     * @param foodId The ID of the food to be logged. Either foodId or foodName must be provided.
     * @param mealTypeId Meal types. 1&#x3D;Breakfast; 2&#x3D;Morning Snack; 3&#x3D;Lunch; 4&#x3D;Afternoon Snack; 5&#x3D;Dinner; 7&#x3D;Anytime.
     * @param unitId The ID of units used. Typically retrieved via a previous call to Get Food Logs, Search Foods, or Get Food Units.
     * @param amount The amount consumed in the format X.XX in the specified unitId.
     * @param date Log entry date in the format yyyy-MM-dd.
     * @param foodName Food entry name. Either foodId or foodName must be provided. (optional)
     * @param favorite The &#x60;true&#x60; value will add the food to the user&#39;s favorites after creating the log entry; while the &#x60;false&#x60; value will not. Valid only with foodId value. (optional)
     * @param brandName Brand name of food. Valid only with foodName parameters. (optional)
     * @param calories Calories for this serving size. This is allowed with foodName parameter (default to zero); otherwise it is ignored. (optional)
     * @return void
     */
    open suspend fun addFoodsLog(
        foodId: kotlin.String,
        mealTypeId: kotlin.String,
        unitId: kotlin.String,
        amount: kotlin.String,
        date: java.time.LocalDate,
        foodName: kotlin.String?,
        favorite: kotlin.Boolean?,
        brandName: kotlin.String?,
        calories: kotlin.Int?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        foodId?.apply { localVariableQuery["foodId"] = listOf("$foodId") }
        foodName?.apply { localVariableQuery["foodName"] = listOf("$foodName") }
        mealTypeId?.apply { localVariableQuery["mealTypeId"] = listOf("$mealTypeId") }
        unitId?.apply { localVariableQuery["unitId"] = listOf("$unitId") }
        amount?.apply { localVariableQuery["amount"] = listOf("$amount") }
        date?.apply { localVariableQuery["date"] = listOf("$date") }
        favorite?.apply { localVariableQuery["favorite"] = listOf("$favorite") }
        brandName?.apply { localVariableQuery["brandName"] = listOf("$brandName") }
        calories?.apply { localVariableQuery["calories"] = listOf("$calories") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods/log.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/meals.json
     * Create Meal
     * Creates a meal with the given food contained in the post body.
     * @param meal Meal to create
     * @return void
     */
    open suspend fun addMeal(meal: Meal): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody = meal

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/meals.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/foods/log/goal.json
     * Update Food Goal
     * Updates a user&#39;s daily calories consumption goal or food plan and returns a response in the format requested.
     * @param calories Manual calorie consumption goal in either calories or intensity must be provided.
     * @param intensity Food plan intensity (MAINTENANCE, EASIER, MEDIUM, KINDAHARD, or HARDER). Either calories or intensity must be provided. (optional)
     * @param personalized Food plan type; true or false. (optional)
     * @return void
     */
    open suspend fun addUpdateFoodsGoal(
        calories: kotlin.Int,
        intensity: kotlin.String?,
        personalized: kotlin.String?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        calories?.apply { localVariableQuery["calories"] = listOf("$calories") }
        intensity?.apply { localVariableQuery["intensity"] = listOf("$intensity") }
        personalized?.apply { localVariableQuery["personalized"] = listOf("$personalized") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods/log/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/foods/log/water/goal.json
     * Update Water Goal
     * Updates a user&#39;s daily calories consumption goal or food plan and returns a response in the format requested.
     * @param target The target water goal in the format X.X is set in unit based on locale.
     * @return void
     */
    open suspend fun addUpdateWaterGoal(target: kotlin.Int): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        target?.apply { localVariableQuery["target"] = listOf("$target") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods/log/water/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/foods/log/water.json
     * Log Water
     * Creates a log entry for water using units in the unit systems that corresponds to the Accept-Language header provided.
     * @param date The date of records to be returned in the format yyyy-MM-dd.
     * @param amount The amount consumption in the format X.XX and in the specified waterUnit or in the unit system that corresponds to the Accept-Language header provided.
     * @param unit Water measurement unit; &#x60;ml&#x60;, &#x60;fl oz&#x60;, or &#x60;cup&#x60;. (optional)
     * @return void
     */
    open suspend fun addWaterLog(
        date: java.time.LocalDate,
        amount: kotlin.Int,
        unit: kotlin.String?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        date?.apply { localVariableQuery["date"] = listOf("$date") }
        amount?.apply { localVariableQuery["amount"] = listOf("$amount") }
        unit?.apply { localVariableQuery["unit"] = listOf("$unit") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods/log/water.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/foods/log/favorite/{food-id}.json
     * Delete Favorite Food
     * Deletes a food with the given ID to the user&#39;s list of favorite foods.
     * @param foodId The ID of the food to be deleted from user&#39;s favorites.
     * @return void
     */
    open suspend fun deleteFavoriteFood(foodId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/foods/log/favorite/{food-id}.json".replace(
                    "{" + "food-id" + "}",
                    "$foodId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/foods/{food-id}.json
     * Delete Custom Food
     * Deletes custom food for a user and returns a response in the format requested.
     * @param foodId The ID of the food to be deleted.
     * @return void
     */
    open suspend fun deleteFoods(foodId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/foods/{food-id}.json".replace("{" + "food-id" + "}", "$foodId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/foods/log/{food-log-id}.json
     * Delete Food Log
     * Deletes a user&#39;s food log entry with the given ID.
     * @param foodLogId The ID of the food log entry to be deleted.
     * @return void
     */
    open suspend fun deleteFoodsLog(foodLogId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/foods/log/{food-log-id}.json".replace(
                    "{" + "food-log-id" + "}",
                    "$foodLogId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/foods/log/water/{water-log-id}.json
     * Delete Water Log
     * Deletes a user&#39;s water log entry with the given ID.
     * @param waterLogId The ID of the waterUnit log entry to be deleted.
     * @return void
     */
    open suspend fun deleteWaterLog(waterLogId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/foods/log/water/{water-log-id}.json".replace(
                    "{" + "water-log-id" + "}",
                    "$waterLogId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/foods/log/{food-log-id}.json
     * Edit Food Log
     * The Edit Food Log endpoint changes the quantity or calories consumed for a user&#39;s food log entry with the given Food Log ID.
     * @param foodLogId The ID of the food log entry to be edited.
     * @param mealTypeId Meal types. 1&#x3D;Breakfast; 2&#x3D;Morning Snack; 3&#x3D;Lunch; 4&#x3D;Afternoon Snack; 5&#x3D;Dinner; 7&#x3D;Anytime.
     * @param unitId The ID of units used. Typically retrieved via a previous call to Get Food Logs, Search Foods, or Get Food Units.
     * @param amount The amount consumed in the format X.XX in the specified unitId.
     * @param calories Calories for this serving size. This is allowed with foodName parameter (default to zero); otherwise it is ignored. (optional)
     * @return void
     */
    open suspend fun editFoodsLog(
        foodLogId: kotlin.String,
        mealTypeId: kotlin.String,
        unitId: kotlin.String,
        amount: kotlin.String,
        calories: kotlin.Int?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        mealTypeId?.apply { localVariableQuery["mealTypeId"] = listOf("$mealTypeId") }
        unitId?.apply { localVariableQuery["unitId"] = listOf("$unitId") }
        amount?.apply { localVariableQuery["amount"] = listOf("$amount") }
        calories?.apply { localVariableQuery["calories"] = listOf("$calories") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods/log/{food-log-id}.json".replace(
                    "{" + "food-log-id" + "}",
                    "$foodLogId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/foods/log/favorite.json
     * Get Favorite Foods
     * Returns a list of a user&#39;s favorite foods in the format requested. A favorite food in the list provides a quick way to log the food via the Log Food endpoint.
     * @return void
     */
    open suspend fun getFavoriteFoods(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/foods/log/favorite.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/foods/log/date/{date}.json
     * Get Food Logs
     * Retreives a summary and list of a user&#39;s food log entries for a given day in the format requested.
     * @param date The date of records to be returned. In the format yyyy-MM-dd.
     * @return void
     */
    open suspend fun getFoodsByDate(date: java.time.LocalDate): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/foods/log/date/{date}.json".replace("{" + "date" + "}", "$date"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/foods/log/goal.json
     * Get Food Goals
     * Returns a user&#39;s current daily calorie consumption goal and/or foodPlan value in the format requested.
     * @return void
     */
    open suspend fun getFoodsGoal(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/foods/log/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/foods/{food-id}.json
     * Get Food
     * Returns the details of a specific food in the Fitbit food databases or a private food that an authorized user has entered in the format requested.
     * @param foodId The ID of the food.
     * @return void
     */
    open suspend fun getFoodsInfo(foodId: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/foods/{food-id}.json".replace("{" + "food-id" + "}", "$foodId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/foods/search.json
     * Search Foods
     * Returns a list of public foods from the Fitbit food database and private food the user created in the format requested.
     * @param query The URL-encoded search query.
     * @return void
     */
    open suspend fun getFoodsList(query: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        query?.apply { localVariableQuery["query"] = listOf("$query") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/foods/search.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/foods/locales.json
     * Get Food Locales
     * Returns the food locales that the user may choose to search, log, and create food in.
     * @return void
     */
    open suspend fun getFoodsLocales(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/foods/locales.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/foods/units.json
     * Get Food Units
     * Returns a list of all valid Fitbit food units in the format requested.
     * @return void
     */
    open suspend fun getFoodsUnits(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/foods/units.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/foods/log/frequent.json
     * Get Frequent Foods
     * Returns a list of a user&#39;s frequent foods in the format requested. A frequent food in the list provides a quick way to log the food via the Log Food endpoint.
     * @return void
     */
    open suspend fun getFrequentFoods(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/foods/log/frequent.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/meals.json
     * Get Meals
     * Returns a list of meals created by user in the user&#39;s food log in the format requested. User creates and manages meals on the Food Log tab on the website.
     * @return void
     */
    open suspend fun getMeals(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/meals.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/foods/log/recent.json
     * Get Recent Foods
     * Returns a list of a user&#39;s frequent foods in the format requested. A frequent food in the list provides a quick way to log the food via the Log Food endpoint.
     * @return void
     */
    open suspend fun getRecentFoods(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/foods/log/recent.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/foods/log/water/date/{date}.json
     * Get Water Logs
     * Retreives a summary and list of a user&#39;s water log entries for a given day in the requested using units in the unit system that corresponds to the Accept-Language header provided.
     * @param date The date of records to be returned. In the format yyyy-MM-dd.
     * @return void
     */
    open suspend fun getWaterByDate(date: java.time.LocalDate): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/foods/log/water/date/{date}.json".replace("{" + "date" + "}", "$date"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/foods/log/water/goal.json
     * Get Water Goal
     * Retreives a summary and list of a user&#39;s water goal entries for a given day in the requested using units in the unit system that corresponds to the Accept-Language header provided.
     * @return void
     */
    open suspend fun getWaterGoal(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/foods/log/water/goal.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/foods/log/water/{water-log-id}.json
     * Update Water Log
     * Updates a user&#39;s water log entry with the given ID.
     * @param waterLogId The ID of the waterUnit log entry to be deleted.
     * @param amount Amount consumed; in the format X.X and in the specified waterUnit or in the unit system that corresponds to the Accept-Language header provided.
     * @param unit Water measurement unit. &#39;ml&#39;, &#39;fl oz&#39;, or &#39;cup&#39;. (optional)
     * @return void
     */
    open suspend fun updateWaterLog(
        waterLogId: kotlin.String,
        amount: kotlin.String,
        unit: kotlin.String?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        amount?.apply { localVariableQuery["amount"] = listOf("$amount") }
        unit?.apply { localVariableQuery["unit"] = listOf("$unit") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/foods/log/water/{water-log-id}.json".replace(
                    "{" + "water-log-id" + "}",
                    "$waterLogId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
