/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

open class AuthorizationApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * POST /1.1/oauth2/introspect
     * Retrieve the active state of an OAuth 2.0 token
     * Retrieves the active state of an OAuth 2.0 token. It follows https://tools.ietf.org/html/rfc7662.
     * @param token OAuth 2.0 token to retrieve the state of
     * @return void
     */
    open suspend fun introspect(token: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            ParametersBuilder().also {
                token?.apply { it.append("token", token) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1.1/oauth2/introspect",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /oauth2/token
     * Get OAuth 2 access token
     * Retrieves an OAuth 2 access token.
     * @param clientId This is your Fitbit API application id from your settings on dev.fitbit.com.
     * @param grantType Authorization grant type. Valid values are &#39;authorization_code&#39; and &#39;refresh_token&#39;.
     * @param authorization The Authorization header must be set to &#39;Basic&#39; followed by a space, then the Base64 encoded string of your application&#39;s client id and secret concatenated with a colon. For example, &#39;Basic Y2xpZW50X2lkOmNsaWVudCBzZWNyZXQ&#x3D;&#39;. The Base64 encoded string, &#39;Y2xpZW50X2lkOmNsaWVudCBzZWNyZXQ&#x3D;&#39;, is decoded as &#39;client_id:client secret&#39;. (optional)
     * @param contentType Request Content-Type. Should be application/x-www-form-urlencoded (optional)
     * @param code Authorization code received in the redirect as URI parameter. Required if using the Authorization Code flow. (optional)
     * @param expiresIn Specify the desired access token lifetime. Defaults to 28800 for 8 hours. The other valid value is 3600 for 1 hour. (optional)
     * @param redirectUri Uri to which the access token will be sent if the request is successful. Required if specified in the redirect to the authorization page. Must be exact match. (optional)
     * @param refreshToken Refresh token issued by Fitbit. Required if &#39;grant_type&#39; is &#39;refresh_token&#39;. (optional)
     * @param state Required if specified in the redirect uri of the authorization page. Must be an exact match. (optional)
     * @return void
     */
    open suspend fun oauthToken(
        clientId: kotlin.String,
        grantType: kotlin.String,
        authorization: kotlin.String?,
        contentType: kotlin.String?,
        code: kotlin.String?,
        expiresIn: kotlin.String?,
        redirectUri: kotlin.String?,
        refreshToken: kotlin.String?,
        state: kotlin.String?
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        code?.apply { localVariableQuery["code"] = listOf("$code") }
        clientId?.apply { localVariableQuery["client_id"] = listOf("$clientId") }
        expiresIn?.apply { localVariableQuery["expires_in"] = listOf("$expiresIn") }
        grantType?.apply { localVariableQuery["grant_type"] = listOf("$grantType") }
        redirectUri?.apply { localVariableQuery["redirect_uri"] = listOf("$redirectUri") }
        refreshToken?.apply { localVariableQuery["refresh_token"] = listOf("$refreshToken") }
        state?.apply { localVariableQuery["state"] = listOf("$state") }

        val localVariableHeaders = mutableMapOf<String, String>()
        authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/oauth2/token",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = false
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /oauth2/revoke
     * Revokes consent of the access token or refresh token
     * Revokes consent of the access token or refresh token
     * @param token The access token or refresh token to be revoked
     * @return void
     */
    open suspend fun revoke(token: kotlin.String): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            ParametersBuilder().also {
                token?.apply { it.append("token", token) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/oauth2/revoke",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
