/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class DevicesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null
) : ApiClient(
    baseUrl,
    httpClientEngine,
    httpClientConfig
) {
    /**
     * POST /1/user/-/devices/tracker/{tracker-id}/alarms.json
     * Add Alarm
     * Adds the alarm settings to a given ID for a given device.
     * @param trackerId The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
     * @param time Time of day that the alarm vibrates with a UTC timezone offset, e.g. 07:15-08:00.
     * @param enabled true or false. If false, alarm does not vibrate until enabled is set to true.
     * @param recurring true or false. If false, the alarm is a single event.
     * @param weekDays Comma separated list of days of the week on which the alarm vibrates, e.g. MONDAY, TUESDAY.
     * @return void
     */
    open suspend fun addAlarms(
        trackerId: kotlin.Int,
        time: kotlin.String,
        enabled: kotlin.Boolean,
        recurring: kotlin.String,
        weekDays: kotlin.String
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        time?.apply { localVariableQuery["time"] = listOf("$time") }
        enabled?.apply { localVariableQuery["enabled"] = listOf("$enabled") }
        recurring?.apply { localVariableQuery["recurring"] = listOf("$recurring") }
        weekDays?.apply { localVariableQuery["weekDays"] = listOf("$weekDays") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/devices/tracker/{tracker-id}/alarms.json".replace(
                    "{" + "tracker-id" + "}",
                    "$trackerId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * DELETE /1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json
     * Delete Alarm
     * Deletes the user&#39;s device alarm entry with the given ID for a given device.
     * @param trackerId The ID of the tracker whose alarms is managed. The tracker-id value is found via the Get Devices endpoint.
     * @param alarmId The ID of the alarm to be updated. The alarm-id value is found via the Get Alarms endpoint.
     * @return void
     */
    open suspend fun deleteAlarms(trackerId: kotlin.Int, alarmId: kotlin.Int): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.DELETE,
                "/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json".replace(
                    "{" + "tracker-id" + "}",
                    "$trackerId"
                ).replace("{" + "alarm-id" + "}", "$alarmId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/devices/tracker/{tracker-id}/alarms.json
     * Get Alarms
     * Returns alarms for a device
     * @param trackerId The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
     * @return void
     */
    open suspend fun getAlarms(trackerId: kotlin.Int): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/devices/tracker/{tracker-id}/alarms.json".replace(
                    "{" + "tracker-id" + "}",
                    "$trackerId"
                ),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * GET /1/user/-/devices.json
     * Get Devices
     * Returns a list of the Fitbit devices connected to a user&#39;s account.
     * @return void
     */
    open suspend fun getDevices(): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/1/user/-/devices.json",
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     * POST /1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json
     * Update Alarm
     * Updates the alarm entry with a given ID for a given device. It also gets a response in the format requested.
     * @param trackerId The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
     * @param alarmId The ID of the alarm to be updated. The alarm-id value is found in the response of the Get Activity endpoint.
     * @param time Time of day that the alarm vibrates with a UTC timezone offset, e.g. 07:15-08:00.
     * @param enabled true or false. If false, the alarm does not vibrate until enabled is set to true.
     * @param recurring true or false. If false, the alarm is a single event.
     * @param weekDays Comma seperated list of days of the week on which the alarm vibrates, e.g. MONDAY, TUESDAY.
     * @param snoozeLength Minutes between alarms.
     * @param snoozeCount Maximum snooze count.
     * @return void
     */
    open suspend fun updateAlarms(
        trackerId: kotlin.Int,
        alarmId: kotlin.Int,
        time: kotlin.String,
        enabled: kotlin.Boolean,
        recurring: kotlin.String,
        weekDays: kotlin.String,
        snoozeLength: kotlin.Int,
        snoozeCount: kotlin.Int
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>("oauth2")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        time?.apply { localVariableQuery["time"] = listOf("$time") }
        enabled?.apply { localVariableQuery["enabled"] = listOf("$enabled") }
        recurring?.apply { localVariableQuery["recurring"] = listOf("$recurring") }
        weekDays?.apply { localVariableQuery["weekDays"] = listOf("$weekDays") }
        snoozeLength?.apply { localVariableQuery["snoozeLength"] = listOf("$snoozeLength") }
        snoozeCount?.apply { localVariableQuery["snoozeCount"] = listOf("$snoozeCount") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.POST,
                "/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json".replace(
                    "{" + "tracker-id" + "}",
                    "$trackerId"
                ).replace("{" + "alarm-id" + "}", "$alarmId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }
}
