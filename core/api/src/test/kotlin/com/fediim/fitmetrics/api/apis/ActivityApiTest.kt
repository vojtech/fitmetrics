/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.apis.ActivityApi
import io.kotlintest.specs.ShouldSpec

class ActivityApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ActivityApi
        // val apiInstance = ActivityApi()

        // to test addActivitiesLog
        should("test addActivitiesLog") {
            // uncomment below to test addActivitiesLog
            // val activityId : kotlin.Int = 56 // kotlin.Int | The ID of the activity, directory activity or intensity level activity.
            // val manualCalories : kotlin.Int = 56 // kotlin.Int | Calories burned that are manaully specified. Required with activityName must be provided.
            // val startTime : kotlin.String = startTime_example // kotlin.String | Activity start time. Hours and minutes in the format HH:mm:ss.
            // val durationMillis : kotlin.Int = 56 // kotlin.Int | Duration in milliseconds.
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Log entry date in the format yyyy-MM-dd.
            // val distance : kotlin.Int = 56 // kotlin.Int | Distance is required for logging directory activity in the format X.XX and in the selected distanceUnit.
            // val activityName : kotlin.String = activityName_example // kotlin.String | Custom activity name. Either activityId or activityName must be provided.
            // val distanceUnit : kotlin.Int = 56 // kotlin.Int | Distance measurement unit. Steps units are available only for Walking (activityId=90013) and Running (activityId=90009) directory activities and their intensity levels.
            // apiInstance.addActivitiesLog(activityId, manualCalories, startTime, durationMillis, date, distance, activityName, distanceUnit)
        }

        // to test addFavoriteActivities
        should("test addFavoriteActivities") {
            // uncomment below to test addFavoriteActivities
            // val activityId : kotlin.String = activityId_example // kotlin.String | The encoded ID of the activity.
            // apiInstance.addFavoriteActivities(activityId)
        }

        // to test addUpdateActivitiesGoals
        should("test addUpdateActivitiesGoals") {
            // uncomment below to test addUpdateActivitiesGoals
            // val period : kotlin.String = period_example // kotlin.String | daily or weekly.
            // val type : kotlin.String = type_example // kotlin.String | goal type
            // val `value` : kotlin.String = `value`_example // kotlin.String | goal value
            // apiInstance.addUpdateActivitiesGoals(period, type, `value`)
        }

        // to test deleteActivitiesLog
        should("test deleteActivitiesLog") {
            // uncomment below to test deleteActivitiesLog
            // val activityLogId : kotlin.Int = 56 // kotlin.Int | The id of the activity log entry.
            // apiInstance.deleteActivitiesLog(activityLogId)
        }

        // to test deleteFavoriteActivities
        should("test deleteFavoriteActivities") {
            // uncomment below to test deleteFavoriteActivities
            // val activityId : kotlin.String = activityId_example // kotlin.String | The ID of the activity to be removed.
            // apiInstance.deleteFavoriteActivities(activityId)
        }

        // to test getActivitiesByDate
        should("test getActivitiesByDate") {
            // uncomment below to test getActivitiesByDate
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date in the format yyyy-MM-dd
            // apiInstance.getActivitiesByDate(date)
        }

        // to test getActivitiesGoals
        should("test getActivitiesGoals") {
            // uncomment below to test getActivitiesGoals
            // val period : kotlin.String = period_example // kotlin.String | daily or weekly.
            // apiInstance.getActivitiesGoals(period)
        }

        // to test getActivitiesLog
        should("test getActivitiesLog") {
            // uncomment below to test getActivitiesLog
            // apiInstance.getActivitiesLog()
        }

        // to test getActivitiesLogList
        should("test getActivitiesLogList") {
            // uncomment below to test getActivitiesLogList
            // val sort : kotlin.String = sort_example // kotlin.String | The sort order of entries by date asc (ascending) or desc (descending).
            // val offset : kotlin.Int = 56 // kotlin.Int | The offset number of entries.
            // val limit : kotlin.Int = 56 // kotlin.Int | The maximum number of entries returned (maximum;100).
            // val beforeDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate should be specified.
            // val afterDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date in the format yyyy-MM-ddTHH:mm:ss.
            // apiInstance.getActivitiesLogList(sort, offset, limit, beforeDate, afterDate)
        }

        // to test getActivitiesTCX
        should("test getActivitiesTCX") {
            // uncomment below to test getActivitiesTCX
            // val logId : kotlin.String = logId_example // kotlin.String | The activity's log ID.
            // val includePartialTCX : kotlin.Boolean = true // kotlin.Boolean | Include TCX points regardless of GPS data being present
            // apiInstance.getActivitiesTCX(logId, includePartialTCX)
        }

        // to test getActivitiesTypeDetail
        should("test getActivitiesTypeDetail") {
            // uncomment below to test getActivitiesTypeDetail
            // val activityId : kotlin.String = activityId_example // kotlin.String | The activity ID.
            // apiInstance.getActivitiesTypeDetail(activityId)
        }

        // to test getActivitiesTypes
        should("test getActivitiesTypes") {
            // uncomment below to test getActivitiesTypes
            // apiInstance.getActivitiesTypes()
        }

        // to test getFavoriteActivities
        should("test getFavoriteActivities") {
            // uncomment below to test getFavoriteActivities
            // apiInstance.getFavoriteActivities()
        }

        // to test getFrequentActivities
        should("test getFrequentActivities") {
            // uncomment below to test getFrequentActivities
            // apiInstance.getFrequentActivities()
        }

        // to test getRecentActivities
        should("test getRecentActivities") {
            // uncomment below to test getRecentActivities
            // apiInstance.getRecentActivities()
        }
    }
}
