/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.apis.DevicesApi
import io.kotlintest.specs.ShouldSpec

class DevicesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DevicesApi
        // val apiInstance = DevicesApi()

        // to test addAlarms
        should("test addAlarms") {
            // uncomment below to test addAlarms
            // val trackerId : kotlin.Int = 56 // kotlin.Int | The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
            // val time : kotlin.String = time_example // kotlin.String | Time of day that the alarm vibrates with a UTC timezone offset, e.g. 07:15-08:00.
            // val enabled : kotlin.Boolean = true // kotlin.Boolean | true or false. If false, alarm does not vibrate until enabled is set to true.
            // val recurring : kotlin.String = recurring_example // kotlin.String | true or false. If false, the alarm is a single event.
            // val weekDays : kotlin.String = weekDays_example // kotlin.String | Comma separated list of days of the week on which the alarm vibrates, e.g. MONDAY, TUESDAY.
            // apiInstance.addAlarms(trackerId, time, enabled, recurring, weekDays)
        }

        // to test deleteAlarms
        should("test deleteAlarms") {
            // uncomment below to test deleteAlarms
            // val trackerId : kotlin.Int = 56 // kotlin.Int | The ID of the tracker whose alarms is managed. The tracker-id value is found via the Get Devices endpoint.
            // val alarmId : kotlin.Int = 56 // kotlin.Int | The ID of the alarm to be updated. The alarm-id value is found via the Get Alarms endpoint.
            // apiInstance.deleteAlarms(trackerId, alarmId)
        }

        // to test getAlarms
        should("test getAlarms") {
            // uncomment below to test getAlarms
            // val trackerId : kotlin.Int = 56 // kotlin.Int | The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
            // apiInstance.getAlarms(trackerId)
        }

        // to test getDevices
        should("test getDevices") {
            // uncomment below to test getDevices
            // apiInstance.getDevices()
        }

        // to test updateAlarms
        should("test updateAlarms") {
            // uncomment below to test updateAlarms
            // val trackerId : kotlin.Int = 56 // kotlin.Int | The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
            // val alarmId : kotlin.Int = 56 // kotlin.Int | The ID of the alarm to be updated. The alarm-id value is found in the response of the Get Activity endpoint.
            // val time : kotlin.String = time_example // kotlin.String | Time of day that the alarm vibrates with a UTC timezone offset, e.g. 07:15-08:00.
            // val enabled : kotlin.Boolean = true // kotlin.Boolean | true or false. If false, the alarm does not vibrate until enabled is set to true.
            // val recurring : kotlin.String = recurring_example // kotlin.String | true or false. If false, the alarm is a single event.
            // val weekDays : kotlin.String = weekDays_example // kotlin.String | Comma seperated list of days of the week on which the alarm vibrates, e.g. MONDAY, TUESDAY.
            // val snoozeLength : kotlin.Int = 56 // kotlin.Int | Minutes between alarms.
            // val snoozeCount : kotlin.Int = 56 // kotlin.Int | Maximum snooze count.
            // apiInstance.updateAlarms(trackerId, alarmId, time, enabled, recurring, weekDays, snoozeLength, snoozeCount)
        }
    }
}
