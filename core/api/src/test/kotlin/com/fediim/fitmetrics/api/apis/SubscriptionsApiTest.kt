/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.apis.SubscriptionsApi
import io.kotlintest.specs.ShouldSpec

class SubscriptionsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SubscriptionsApi
        // val apiInstance = SubscriptionsApi()

        // to test addSubscriptions
        should("test addSubscriptions") {
            // uncomment below to test addSubscriptions
            // val collectionPath : kotlin.String = collectionPath_example // kotlin.String | This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections' updates. Each subscriber can have only one subscription for a specific user's collection.
            // val subscriptionId : kotlin.String = subscriptionId_example // kotlin.String | This is the unique ID of the subscription created by the API client application. Each ID must be unique across the entire set of subscribers and collections. The Fitbit servers will pass this ID back along with any notifications about the user indicated by the user parameter in the URL path.
            // apiInstance.addSubscriptions(collectionPath, subscriptionId)
        }

        // to test deleteSubscriptions
        should("test deleteSubscriptions") {
            // uncomment below to test deleteSubscriptions
            // val collectionPath : kotlin.String = collectionPath_example // kotlin.String | This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections' updates. Each subscriber can have only one subscription for a specific user's collection.
            // val subscriptionId : kotlin.String = subscriptionId_example // kotlin.String | This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections' updates. Each subscriber can have only one subscription for a specific user's collection.
            // apiInstance.deleteSubscriptions(collectionPath, subscriptionId)
        }

        // to test getSubscriptionsList
        should("test getSubscriptionsList") {
            // uncomment below to test getSubscriptionsList
            // val collectionPath : kotlin.String = collectionPath_example // kotlin.String | This is the resource of the collection to receive notifications from (foods, activities, sleep, or body). If not present, subscription will be created for all collections. If you have both all and specific collection subscriptions, you will get duplicate notifications on that collections' updates. Each subscriber can have only one subscription for a specific user's collection.
            // apiInstance.getSubscriptionsList(collectionPath)
        }
    }
}
