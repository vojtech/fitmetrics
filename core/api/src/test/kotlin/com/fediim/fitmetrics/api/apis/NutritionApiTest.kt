/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.apis.NutritionApi
import io.kotlintest.specs.ShouldSpec

class NutritionApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of NutritionApi
        // val apiInstance = NutritionApi()

        // to test addFavoriteFood
        should("test addFavoriteFood") {
            // uncomment below to test addFavoriteFood
            // val foodId : kotlin.String = foodId_example // kotlin.String | The ID of the food to be added to user's favorites.
            // apiInstance.addFavoriteFood(foodId)
        }

        // to test addFoods
        should("test addFoods") {
            // uncomment below to test addFoods
            // val name : kotlin.String = name_example // kotlin.String | The food name.
            // val defaultFoodMeasurementUnitId : kotlin.String = defaultFoodMeasurementUnitId_example // kotlin.String | The ID of the default measurement unit. Full list of units can be retrieved via the Get Food Units endpoint.
            // val defaultServingSize : kotlin.String = defaultServingSize_example // kotlin.String | The size of the default serving. Nutrition values should be provided for this serving size.
            // val calories : kotlin.String = calories_example // kotlin.String | The calories in the default serving size.
            // val formType : kotlin.String = formType_example // kotlin.String | Form type; LIQUID or DRY.
            // val description : kotlin.String = description_example // kotlin.String | The description of the food.
            // apiInstance.addFoods(name, defaultFoodMeasurementUnitId, defaultServingSize, calories, formType, description)
        }

        // to test addFoodsLog
        should("test addFoodsLog") {
            // uncomment below to test addFoodsLog
            // val foodId : kotlin.String = foodId_example // kotlin.String | The ID of the food to be logged. Either foodId or foodName must be provided.
            // val mealTypeId : kotlin.String = mealTypeId_example // kotlin.String | Meal types. 1=Breakfast; 2=Morning Snack; 3=Lunch; 4=Afternoon Snack; 5=Dinner; 7=Anytime.
            // val unitId : kotlin.String = unitId_example // kotlin.String | The ID of units used. Typically retrieved via a previous call to Get Food Logs, Search Foods, or Get Food Units.
            // val amount : kotlin.String = amount_example // kotlin.String | The amount consumed in the format X.XX in the specified unitId.
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Log entry date in the format yyyy-MM-dd.
            // val foodName : kotlin.String = foodName_example // kotlin.String | Food entry name. Either foodId or foodName must be provided.
            // val favorite : kotlin.Boolean = true // kotlin.Boolean | The `true` value will add the food to the user's favorites after creating the log entry; while the `false` value will not. Valid only with foodId value.
            // val brandName : kotlin.String = brandName_example // kotlin.String | Brand name of food. Valid only with foodName parameters.
            // val calories : kotlin.Int = 56 // kotlin.Int | Calories for this serving size. This is allowed with foodName parameter (default to zero); otherwise it is ignored.
            // apiInstance.addFoodsLog(foodId, mealTypeId, unitId, amount, date, foodName, favorite, brandName, calories)
        }

        // to test addMeal
        should("test addMeal") {
            // uncomment below to test addMeal
            // val meal : Meal =  // Meal | Meal to create
            // apiInstance.addMeal(meal)
        }

        // to test addUpdateFoodsGoal
        should("test addUpdateFoodsGoal") {
            // uncomment below to test addUpdateFoodsGoal
            // val calories : kotlin.Int = 56 // kotlin.Int | Manual calorie consumption goal in either calories or intensity must be provided.
            // val intensity : kotlin.String = intensity_example // kotlin.String | Food plan intensity (MAINTENANCE, EASIER, MEDIUM, KINDAHARD, or HARDER). Either calories or intensity must be provided.
            // val personalized : kotlin.String = personalized_example // kotlin.String | Food plan type; true or false.
            // apiInstance.addUpdateFoodsGoal(calories, intensity, personalized)
        }

        // to test addUpdateWaterGoal
        should("test addUpdateWaterGoal") {
            // uncomment below to test addUpdateWaterGoal
            // val target : kotlin.Int = 56 // kotlin.Int | The target water goal in the format X.X is set in unit based on locale.
            // apiInstance.addUpdateWaterGoal(target)
        }

        // to test addWaterLog
        should("test addWaterLog") {
            // uncomment below to test addWaterLog
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date of records to be returned in the format yyyy-MM-dd.
            // val amount : kotlin.Int = 56 // kotlin.Int | The amount consumption in the format X.XX and in the specified waterUnit or in the unit system that corresponds to the Accept-Language header provided.
            // val unit : kotlin.String = unit_example // kotlin.String | Water measurement unit; `ml`, `fl oz`, or `cup`.
            // apiInstance.addWaterLog(date, amount, unit)
        }

        // to test deleteFavoriteFood
        should("test deleteFavoriteFood") {
            // uncomment below to test deleteFavoriteFood
            // val foodId : kotlin.String = foodId_example // kotlin.String | The ID of the food to be deleted from user's favorites.
            // apiInstance.deleteFavoriteFood(foodId)
        }

        // to test deleteFoods
        should("test deleteFoods") {
            // uncomment below to test deleteFoods
            // val foodId : kotlin.String = foodId_example // kotlin.String | The ID of the food to be deleted.
            // apiInstance.deleteFoods(foodId)
        }

        // to test deleteFoodsLog
        should("test deleteFoodsLog") {
            // uncomment below to test deleteFoodsLog
            // val foodLogId : kotlin.String = foodLogId_example // kotlin.String | The ID of the food log entry to be deleted.
            // apiInstance.deleteFoodsLog(foodLogId)
        }

        // to test deleteWaterLog
        should("test deleteWaterLog") {
            // uncomment below to test deleteWaterLog
            // val waterLogId : kotlin.String = waterLogId_example // kotlin.String | The ID of the waterUnit log entry to be deleted.
            // apiInstance.deleteWaterLog(waterLogId)
        }

        // to test editFoodsLog
        should("test editFoodsLog") {
            // uncomment below to test editFoodsLog
            // val foodLogId : kotlin.String = foodLogId_example // kotlin.String | The ID of the food log entry to be edited.
            // val mealTypeId : kotlin.String = mealTypeId_example // kotlin.String | Meal types. 1=Breakfast; 2=Morning Snack; 3=Lunch; 4=Afternoon Snack; 5=Dinner; 7=Anytime.
            // val unitId : kotlin.String = unitId_example // kotlin.String | The ID of units used. Typically retrieved via a previous call to Get Food Logs, Search Foods, or Get Food Units.
            // val amount : kotlin.String = amount_example // kotlin.String | The amount consumed in the format X.XX in the specified unitId.
            // val calories : kotlin.Int = 56 // kotlin.Int | Calories for this serving size. This is allowed with foodName parameter (default to zero); otherwise it is ignored.
            // apiInstance.editFoodsLog(foodLogId, mealTypeId, unitId, amount, calories)
        }

        // to test getFavoriteFoods
        should("test getFavoriteFoods") {
            // uncomment below to test getFavoriteFoods
            // apiInstance.getFavoriteFoods()
        }

        // to test getFoodsByDate
        should("test getFoodsByDate") {
            // uncomment below to test getFoodsByDate
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date of records to be returned. In the format yyyy-MM-dd.
            // apiInstance.getFoodsByDate(date)
        }

        // to test getFoodsGoal
        should("test getFoodsGoal") {
            // uncomment below to test getFoodsGoal
            // apiInstance.getFoodsGoal()
        }

        // to test getFoodsInfo
        should("test getFoodsInfo") {
            // uncomment below to test getFoodsInfo
            // val foodId : kotlin.String = foodId_example // kotlin.String | The ID of the food.
            // apiInstance.getFoodsInfo(foodId)
        }

        // to test getFoodsList
        should("test getFoodsList") {
            // uncomment below to test getFoodsList
            // val query : kotlin.String = query_example // kotlin.String | The URL-encoded search query.
            // apiInstance.getFoodsList(query)
        }

        // to test getFoodsLocales
        should("test getFoodsLocales") {
            // uncomment below to test getFoodsLocales
            // apiInstance.getFoodsLocales()
        }

        // to test getFoodsUnits
        should("test getFoodsUnits") {
            // uncomment below to test getFoodsUnits
            // apiInstance.getFoodsUnits()
        }

        // to test getFrequentFoods
        should("test getFrequentFoods") {
            // uncomment below to test getFrequentFoods
            // apiInstance.getFrequentFoods()
        }

        // to test getMeals
        should("test getMeals") {
            // uncomment below to test getMeals
            // apiInstance.getMeals()
        }

        // to test getRecentFoods
        should("test getRecentFoods") {
            // uncomment below to test getRecentFoods
            // apiInstance.getRecentFoods()
        }

        // to test getWaterByDate
        should("test getWaterByDate") {
            // uncomment below to test getWaterByDate
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date of records to be returned. In the format yyyy-MM-dd.
            // apiInstance.getWaterByDate(date)
        }

        // to test getWaterGoal
        should("test getWaterGoal") {
            // uncomment below to test getWaterGoal
            // apiInstance.getWaterGoal()
        }

        // to test updateWaterLog
        should("test updateWaterLog") {
            // uncomment below to test updateWaterLog
            // val waterLogId : kotlin.String = waterLogId_example // kotlin.String | The ID of the waterUnit log entry to be deleted.
            // val amount : kotlin.String = amount_example // kotlin.String | Amount consumed; in the format X.X and in the specified waterUnit or in the unit system that corresponds to the Accept-Language header provided.
            // val unit : kotlin.String = unit_example // kotlin.String | Water measurement unit. 'ml', 'fl oz', or 'cup'.
            // apiInstance.updateWaterLog(waterLogId, amount, unit)
        }
    }
}
