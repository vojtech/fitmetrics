/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.fediim.fitmetrics.api.apis

import com.fediim.fitmetrics.api.apis.BodyApi
import io.kotlintest.specs.ShouldSpec

class BodyApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of BodyApi
        // val apiInstance = BodyApi()

        // to test addBodyFatLog
        should("test addBodyFatLog") {
            // uncomment below to test addBodyFatLog
            // val fat : kotlin.Int = 56 // kotlin.Int | Body fat in the format of X.XX in the unit system that corresponds to the Accept-Language header provided.
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Log entry date in the format yyyy-MM-dd.
            // val time : kotlin.String = time_example // kotlin.String | Time of the measurement in hours and minutes in the format HH:mm:ss that is set to the last second of the day if not provided.
            // apiInstance.addBodyFatLog(fat, date, time)
        }

        // to test addWeightLog
        should("test addWeightLog") {
            // uncomment below to test addWeightLog
            // val weight : kotlin.Int = 56 // kotlin.Int | Weight in the format of X.XX.
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Log entry date in the format yyyy-MM-dd.
            // val time : kotlin.String = time_example // kotlin.String | Time of the measurement; hours and minutes in the format of HH:mm:ss, which is set to the last second of the day if not provided.
            // apiInstance.addWeightLog(weight, date, time)
        }

        // to test deleteBodyFatLog
        should("test deleteBodyFatLog") {
            // uncomment below to test deleteBodyFatLog
            // val bodyFatLogId : kotlin.Int = 56 // kotlin.Int | The ID of the body fat log entry.
            // apiInstance.deleteBodyFatLog(bodyFatLogId)
        }

        // to test deleteWeightLog
        should("test deleteWeightLog") {
            // uncomment below to test deleteWeightLog
            // val bodyWeightLogId : kotlin.Int = 56 // kotlin.Int | The ID of the body weight log entry.
            // apiInstance.deleteWeightLog(bodyWeightLogId)
        }

        // to test getBodyFatByDate
        should("test getBodyFatByDate") {
            // uncomment below to test getBodyFatByDate
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date in the format yyyy-MM-dd.
            // apiInstance.getBodyFatByDate(date)
        }

        // to test getBodyFatByDatePeriod
        should("test getBodyFatByDatePeriod") {
            // uncomment below to test getBodyFatByDatePeriod
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date in the format yyyy-MM-dd.
            // val period : kotlin.String = period_example // kotlin.String | The range for which data will be returned. Options are 1d, 7d, 30d, 1w, 1m, 3m, 6m, 1y, or max.
            // apiInstance.getBodyFatByDatePeriod(date, period)
        }

        // to test getBodyFatByDateRange
        should("test getBodyFatByDateRange") {
            // uncomment below to test getBodyFatByDateRange
            // val baseDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The range start date in the format yyyy-MM-dd or today.
            // val endDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The end date of the range.
            // apiInstance.getBodyFatByDateRange(baseDate, endDate)
        }

        // to test getBodyGoals
        should("test getBodyGoals") {
            // uncomment below to test getBodyGoals
            // val goalType : kotlin.String = goalType_example // kotlin.String | weight or fat.
            // apiInstance.getBodyGoals(goalType)
        }

        // to test getWeightByDate
        should("test getWeightByDate") {
            // uncomment below to test getWeightByDate
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date in the format yyyy-MM-dd.
            // apiInstance.getWeightByDate(date)
        }

        // to test getWeightByDatePeriod
        should("test getWeightByDatePeriod") {
            // uncomment below to test getWeightByDatePeriod
            // val date : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The date in the format yyyy-MM-dd.
            // val period : kotlin.String = period_example // kotlin.String | The range for which data will be returned. Options are 1d, 7d, 30d, 1w, 1m, 3m, 6m, 1y, or max.
            // apiInstance.getWeightByDatePeriod(date, period)
        }

        // to test getWeightByDateRange
        should("test getWeightByDateRange") {
            // uncomment below to test getWeightByDateRange
            // val baseDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The range start date in the format yyyy-MM-dd or today.
            // val endDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | The end date of the range.
            // apiInstance.getWeightByDateRange(baseDate, endDate)
        }

        // to test updateBodyFatGoal
        should("test updateBodyFatGoal") {
            // uncomment below to test updateBodyFatGoal
            // val fat : kotlin.String = fat_example // kotlin.String | Target body fat percentage; in the format X.XX.
            // apiInstance.updateBodyFatGoal(fat)
        }

        // to test updateWeightGoal
        should("test updateWeightGoal") {
            // uncomment below to test updateWeightGoal
            // val startDate : kotlin.String = startDate_example // kotlin.String | Weight goal start date; in the format yyyy-MM-dd.
            // val startWeight : kotlin.String = startWeight_example // kotlin.String | Weight goal start weight; in the format X.XX, in the unit systems that corresponds to the Accept-Language header provided.
            // val weight : kotlin.String = weight_example // kotlin.String | Weight goal target weight; in the format X.XX, in the unit systems that corresponds to the Accept-Language header provided; required if user doesn't have an existing weight goal.
            // apiInstance.updateWeightGoal(startDate, startWeight, weight)
        }
    }
}
